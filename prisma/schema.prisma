// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum BookingStatus {
  PENDING
  COMPLETED
}

enum CourtSessionStatus {
  AVAILABLE
  UNAVAILABLE
}

model User {
  id Int @id @default(autoincrement()) 
  name String
  username String @unique
  email String @unique
  emailVerified Boolean @default(false) @map("email_verified")
  password String
  profileImg String? @map("profile_img")
  phone String? @unique @db.VarChar(15)
  accessToken String? @db.VarChar(255) @map("access_token")
  refreshToken String? @db.VarChar(255) @map("refresh_token")
  isAdmin Boolean @default(false) @map("is_admin")
  roleId Int? @map("role_id")
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  role Role? @relation(fields: [roleId], references: [id])
  bookings Booking[] @relation(name: "UserBookings")
  bookingsAdmin Booking[] @relation(name: "AdminBookings")
  settingsUpdated Setting? @relation(name: "updated_by_user")

  @@map("users")
}

model Court {
  id Int @id @default(autoincrement())
  name String @unique
  description String @db.Text
  image String 
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  sessions CourtSession[]
  prices CourtPriceDay[]

  @@map("courts")
}

model CourtSession {
  id Int @id @default(autoincrement())
  courtId Int  @map("court_id")
  startHour Int @map("start_hour")
  endHour Int @map("end_hour")
  status CourtSessionStatus @default(AVAILABLE)
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  court Court @relation(fields: [courtId], references: [id])
  unavailables CourtSessionUnavailable[]
  bookings Booking[]

  @@map("court_sessions")
}

model CourtSessionUnavailable {
  id Int @id @default(autoincrement())
  courtSessionId Int @map("court_session_id")
  date DateTime @db.DateTime(0)
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  session CourtSession @relation(fields: [courtSessionId], references: [id])

  @@map("court_sessions_unavailable")
}

model CourtPriceDay {
  id Int @id @default(autoincrement())
  courtId Int @map("court_id")
  dayCode String @db.VarChar(7) @map("day_code") 
  price Decimal @db.Decimal(10, 0) @default(0)
  downPayment Decimal @db.Decimal(10, 0) @default(0) @map("down_payment")
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  court Court @relation(fields: [courtId], references: [id])

  @@map("court_prices_day")
}

model Booking {
  id Int @id @default(autoincrement())
  userId Int @map("user_id")
  adminId Int @map("admin_id")
  courtSessionId Int @map("court_session_id")
  bookingDate DateTime @db.DateTime(0) @map("booking_date")
  paymentId String @map("payment_id")
  paymentType String @map("payment_type") 
  status BookingStatus @default(PENDING)
  downPayment Decimal @db.Decimal(10, 0) @default(0) @map("down_payment")
  totalPrice Decimal @db.Decimal(10, 0) @default(0) @map("total_price")
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  user User @relation(name: "UserBookings", fields: [userId], references: [id])
  admin User @relation(name: "AdminBookings", fields: [adminId], references: [id]) 
  session CourtSession @relation(fields: [courtSessionId], references: [id])

  @@map("bookings")
}

model Setting {
  id Int @id @default(autoincrement())
  companyName String @map("company_name")
  companyDescription String @db.Text @map("company_description")
  companyLogo String @map("company_logo")
  companyAddress String @map("company_address") 
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")
  updatedBy Int? @unique @map("updated_by")

  updatedByUser User? @relation(name: "updated_by_user", fields: [updatedBy], references: [id])

  @@map("settings")
}

model Role {
  id Int @id @default(autoincrement())
  name String @unique
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  permissions RolePermission[]
  users User[]

  @@map("roles")
}

model Permission {
  id Int @id @default(autoincrement())
  name String @unique
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  roles RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id Int @id @default(autoincrement())
  roleId Int @map("role_id")
  permissionId Int @map("permission_id")
  createdAt DateTime @db.DateTime(0) @default(now()) @map("created_at")
  updatedAt DateTime @db.DateTime(0) @updatedAt @map("updated_at")

  role Role @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@map("role_permissions")
}